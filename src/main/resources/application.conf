chat {
  http {
    port = ${HTTP_PORT}
  }
}

akka {
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    debug {
      receive = on
    }
    provider = "cluster"
	serialization-bindings {
	  "dev.matiaspan.actors.CborSerializable" = jackson-cbor
	}
  }

  extensions = [akka.persistence.Persistence]

  persistence {
    cassandra {
      journal {
        keyspace-autocreate = true
        tables-autocreate = true
      }
    }

    journal {
      plugin = "akka.persistence.cassandra.journal"
      auto-start-journals = ["akka.persistence.cassandra.journal"]
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  coordinated-shutdown.exit-jvm = on
}

akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      discovery-method = kubernetes-api
	  service-name = "orders"
    }
  }
}

akka.rollingupdate.kubernetes.pod-name = ${KUBERNETES_POD_NAME}

datastax-java-driver {
  advanced.reconnect-on-init = true
  basic.contact-points = ["cassandra.orders.svc.cluster.local:9042"]
  basic.load-balancing-policy.local-datacenter = "datacenter1"
}
